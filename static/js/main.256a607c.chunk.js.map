{"version":3,"sources":["nodes/consts.ts","nodes/node.ts","nodes/canvas.ts","nodes/rectangle.ts","nodes/rotate.ts","nodes/number.ts","nodes/color.ts","nodes/timer.ts","nodes/translate.ts","nodes/if_else.ts","nodes/string.ts","nodes/split.ts","nodes/operation.ts","nodes/log.ts","connector_content/canvas.tsx","connector_content/color_picker.tsx","connector_content/slider.tsx","connector_content/index.tsx","oura_canvas.tsx","nodes/index.ts","App.tsx","index.tsx"],"names":["NodeName","Node","name","width","position","connectors","immerable","this","nodes","links","setNodes","nodeId","Object","keys","find","key","inputs","forEach","connector","pinLayout","PinLayout","LEFT_PIN","BOTH_PINS","otherLinks","cId","validLinks","link","inputNodeId","inputPinId","outputNodeId","outputPinId","push","getLinks","otherNodeId","otherConnectorId","inputPinSide","outputPinSide","PinSide","LEFT","res","compute","computeSpecific","jsonObj","node","CanvasNode","Canvas","x","y","contentType","data","canvas_width","canvas_height","value","height","ctx","canvas_ctx","current_width","current_height","produce","draft","canvas","fillStyle","fillRect","draw","initFromJson","RectangleNode","Rectangle","RIGHT_PIN","RotateNode","Rotate","rotation","Math","PI","rotate","NumberNode","Number","json","ColorNode","Color","color","TimerNode","Timer","TranslateNode","Translate","translate","IfElseNode","IfElse","cond","if_value","else_value","ret","StringNode","String","SplitNode","Split","str","split","OperationNode","Operation","NO_PINS","values","selected_index","isNaN","LogNode","Log","label","onClick","log","element","console","_","isEqual","props","canvasRef","useRef","useEffect","onConnectorUpdate","current","getContext","style","border","ref","ColorPicker","onColorChange","bind","rgb","r","g","b","a","message","onChange","Component","MySlider","createCustomConnectorsContents","OuraCanvasApp","React","useState","nodePickerPos","setNodePickerPos","nodePickerOnMouseHover","setNodePickerOnMouseHover","zoom","topLeftCorner","panZoomInfo","setPanZoomInfo","selectedItems","setSelectedItems","locallyStoredNodes","localStorage","getItem","locallyStoredLinks","initNodes","JSON","parse","initLinks","undefined","createFromJson","Error","createNodeFromJson","setLinks","setItem","stringify","nodesSchemas","e","error","interval","setInterval","updated","newNodes","toString","clearInterval","onNodeMove","useCallback","id","newX","newY","newWidth","onCreateLink","generateUuid","onDeleteSelection","deleteNodeIds","filter","type","map","deletedLinksIds","linkKey","includes","onNodeSelection","newNode","clone","onContextMenu","event","preventDefault","pageX","pageY","onMouseDown","nodePicker","length","top","left","backgroundColor","nodesSchema","onMouseHover","createCustomConnectorComponent","tabIndex","onPanZoomInfo","onSelectedItems","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.256a607c.chunk.js","sourcesContent":["export enum NodeName {\n    Canvas = \"canvas\",\n    Color = \"color\",\n    Number = \"number\",\n    Rectangle = \"rectangle\",\n    Rotate = \"rotate\",\n    Timer = \"timer\",\n    Translate = \"translate\",\n    IfElse = \"if-else\",\n    String = \"string\",\n    Split = \"split\",\n    Operation = \"operation\",\n    Log = \"log\"\n}","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { immerable } from \"immer\";\nimport {\n    ConnectorCollection,\n    LinkCollection,\n    LinkModel,\n    NodeCollection,\n    NodeModel,\n    PinLayout,\n    PinSide,\n    XYPosition\n} from \"oura-node-editor\";\n\nconst getLinks = (links: LinkCollection, nodeId: string, cId: string): Array<LinkModel> => {\n    const validLinks: Array<LinkModel> = [];\n    Object.keys(links).forEach((key) => {\n        const link = links[key];\n        if (\n            (link.inputNodeId === nodeId && link.inputPinId === cId) ||\n            (link.outputNodeId === nodeId && link.outputPinId === cId)\n        ) {\n            validLinks.push(link);\n        }\n    });\n    return validLinks;\n};\n\nexport default abstract class Node implements NodeModel {\n    [immerable] = true;\n    public name: string;\n    public position: XYPosition;\n    public width: number;\n    public connectors: ConnectorCollection;\n\n    constructor(name: string, width: number, position: XYPosition, connectors: ConnectorCollection) {\n        this.name = name;\n        this.width = width;\n        this.position = position;\n        this.connectors = connectors;\n    }\n\n    static initFromJson(jsonObj: any, node: Node) {\n        node.name = jsonObj.name;\n        node.width = jsonObj.width;\n        node.position = jsonObj.position;\n        node.connectors = jsonObj.connectors;\n    }\n\n    compute(nodes: NodeCollection, links: LinkCollection, setNodes: React.Dispatch<React.SetStateAction<NodeCollection>>): { [id: string]: any } {\n        const nodeId = Object.keys(nodes).find((key) => nodes[key] === this);\n        if (nodeId) {\n            const inputs: { [id: string]: any } = {};\n            Object.keys(this.connectors).forEach((key) => {\n                const connector = this.connectors[key];\n                if (\n                    connector.pinLayout === PinLayout.LEFT_PIN ||\n                    connector.pinLayout === PinLayout.BOTH_PINS\n                ) {\n                    const otherLinks = getLinks(links, nodeId, key);\n                    otherLinks.forEach((link) => {\n                        const otherNodeId =\n                            link.inputNodeId !== nodeId ? link.inputNodeId : link.outputNodeId;\n                        const otherConnectorId =\n                            link.inputNodeId === otherNodeId ? link.inputPinId : link.outputPinId;\n                        const otherPinSide =\n                            link.inputNodeId === otherNodeId\n                                ? link.inputPinSide\n                                : link.outputPinSide;\n                        if (\n                            otherPinSide === PinSide.LEFT &&\n                            connector.pinLayout === PinLayout.BOTH_PINS\n                        ) {\n                            return;\n                        }\n                        const otherNode = nodes[otherNodeId];\n                        const res = (otherNode as Node).compute(nodes, links, setNodes);\n                        if (!(key in inputs)) {\n                            inputs[key] = [];\n                        }\n                        inputs[key].push(res[otherConnectorId]);\n                    });\n                }\n            });\n            return this.computeSpecific(inputs, nodeId, setNodes);\n        }\n        return {};\n    }\n\n    protected abstract computeSpecific(inputs: { [id: string]: any }, nodeId: string, setNodes: React.Dispatch<React.SetStateAction<NodeCollection>>): { [id: string]: any };\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport Node from \"./node\";\nimport { NodeCollection, PinLayout } from \"oura-node-editor\";\nimport { NodeName } from \"./consts\";\nimport produce from \"immer\";\n\nexport default class CanvasNode extends Node {\n    constructor() {\n        super(NodeName.Canvas, 430, {x:0, y:0}, {\n            0: { \n                name: \"draw\", \n                pinLayout: PinLayout.LEFT_PIN, \n                contentType: \"canvas\", \n                data: { canvas_width: 400, canvas_height: 400 } \n            },\n            1: { \n                name: \"width\", \n                pinLayout: PinLayout.LEFT_PIN, \n                contentType: \"number\", \n                data: { value: 400 } \n            },\n            2: { \n                name: \"height\", \n                pinLayout: PinLayout.LEFT_PIN, \n                contentType: \"number\", \n                data: { value: 400 } \n            }\n        });\n    }\n\n    static createFromJson(jsonObj: any) : CanvasNode {\n        let node = new CanvasNode();\n        Node.initFromJson(jsonObj, node);\n        return node;\n    }\n\n    protected computeSpecific(inputs: { [id: string]: any }, nodeId: string, setNodes: React.Dispatch<React.SetStateAction<NodeCollection>>): { [id: string]: any } {\n        const width = \"1\" in inputs ? inputs[1][0] : this.connectors[1].data.value;\n        const height = \"2\" in inputs ? inputs[2][0] : this.connectors[2].data.value;\n        if (\"canvas_ctx\" in this.connectors[0].data) {\n            const ctx = this.connectors[0].data.canvas_ctx;\n            if(\"clearRect\" in ctx) {\n                const current_width = this.connectors[0].data.canvas_width;\n                const current_height = this.connectors[0].data.canvas_height;\n                if(current_width !== width || current_height !== height) {\n                    setNodes(\n                        nodes => produce(nodes, (draft: NodeCollection) => {\n                            draft[nodeId].connectors[0].data.canvas_width = width;\n                            draft[nodeId].connectors[0].data.canvas_height = height;\n                        })\n                    );\n                    ctx.canvas.width = width;\n                    ctx.canvas.height = height;\n                }\n                ctx.fillStyle = \"white\";\n                ctx.fillRect(0, 0, width, height);\n                ctx.fillStyle = \"black\";\n                if (inputs[0]) {\n                    inputs[0].forEach((draw: (arg0: CanvasRenderingContext2D) => void) => {\n                        draw(ctx);\n                    });\n                }\n            }\n        }\n        return {};\n    }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport Node from \"./node\";\nimport { PinLayout } from \"oura-node-editor\";\nimport { NodeName } from \"./consts\";\n\nexport default class RectangleNode extends Node {\n    constructor() {\n        super(NodeName.Rectangle, 100, {x:0, y:0}, {\n            0: { name: \"draw\", pinLayout: PinLayout.RIGHT_PIN, contentType: \"none\", data: {} },\n            1: {\n                name: \"y\",\n                pinLayout: PinLayout.LEFT_PIN,\n                contentType: \"number\",\n                data: { value: 0 }\n            },\n            2: {\n                name: \"z\",\n                pinLayout: PinLayout.LEFT_PIN,\n                contentType: \"number\",\n                data: { value: 0 }\n            },\n            3: {\n                name: \"width\",\n                pinLayout: PinLayout.LEFT_PIN,\n                contentType: \"number\",\n                data: { value: 100 }\n            },\n            4: {\n                name: \"height\",\n                pinLayout: PinLayout.LEFT_PIN,\n                contentType: \"number\",\n                data: { value: 100 }\n            }\n        });\n    }\n\n    static createFromJson(jsonObj: any) : RectangleNode {\n        let node = new RectangleNode();\n        Node.initFromJson(jsonObj, node);\n        return node;\n    }\n\n    protected computeSpecific(inputs: { [id: string]: any }): { [id: string]: any } {\n        const y = \"1\" in inputs ? inputs[1][0] : this.connectors[1].data.value;\n        const x = \"2\" in inputs ? inputs[2][0] : this.connectors[2].data.value;\n        const width = \"3\" in inputs ? inputs[3][0] : this.connectors[3].data.value;\n        const height = \"4\" in inputs ? inputs[4][0] : this.connectors[4].data.value;\n\n        const draw = (ctx: CanvasRenderingContext2D): void => {\n            ctx.fillRect(x, y, width, height);\n        };\n\n        return { \"0\": draw };\n    }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport Node from \"./node\";\nimport { PinLayout } from \"oura-node-editor\";\nimport { NodeName } from \"./consts\";\n\nexport default class RotateNode extends Node {\n    constructor() {\n        super(NodeName.Rotate, 100, {x:0, y:0}, {\n            0: { name: \"draw\", pinLayout: PinLayout.BOTH_PINS, contentType: \"none\", data: {} },\n            1: {\n                name: \"angle\",\n                pinLayout: PinLayout.LEFT_PIN,\n                contentType: \"number\",\n                data: { value: 0 }\n            }\n        });\n    }\n\n    static createFromJson(jsonObj: any) : RotateNode {\n        let node = new RotateNode();\n        Node.initFromJson(jsonObj, node);\n        return node;\n    }\n\n    protected computeSpecific(inputs: { [id: string]: any }): { [id: string]: any } {\n        let rotation = \"1\" in inputs ? inputs[1][0] : this.connectors[1].data.value;\n        rotation = (rotation * Math.PI) / 180;\n        const drawWithRotation = (ctx: CanvasRenderingContext2D): void => {\n            ctx.rotate(rotation);\n            if (inputs[0]) {\n                inputs[0].forEach((draw: (arg0: CanvasRenderingContext2D) => void) => {\n                    draw(ctx);\n                });\n            }\n            ctx.rotate(-rotation);\n        };\n        return { \"0\": drawWithRotation };\n    }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport Node from \"./node\";\nimport { PinLayout } from \"oura-node-editor\";\nimport { NodeName } from \"./consts\";\n\nexport default class NumberNode extends Node {\n    constructor() {\n        super(NodeName.Number, 100, {x:0, y:0}, {\n            0: {\n                name: \"number\",\n                pinLayout: PinLayout.RIGHT_PIN,\n                contentType: \"number\",\n                data: { value: 0 }\n            }\n        });\n    }\n\n    static createFromJson(json: string) : NumberNode {\n        let node = new NumberNode();\n        Node.initFromJson(json, node);\n        return node;\n    }\n\n    protected computeSpecific(): { [id: string]: any } {\n        return { \"0\": this.connectors[0].data.value };\n    }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport Node from \"./node\";\nimport { PinLayout } from \"oura-node-editor\";\nimport { NodeName } from \"./consts\";\n\nexport default class ColorNode extends Node {\n    constructor() {\n        super(NodeName.Color, 250, {x:0, y:0}, {\n            0: {\n                name: \"color\",\n                pinLayout: PinLayout.RIGHT_PIN,\n                contentType: \"color\",\n                data: { color: \"#fff\" }\n            },\n            1: {\n                name: \"slider\",\n                pinLayout: PinLayout.RIGHT_PIN,\n                contentType: \"slider\",\n                data: {  }\n            }\n        });\n    }\n\n    static createFromJson(jsonObj: any) : ColorNode {\n        let node = new ColorNode();\n        Node.initFromJson(jsonObj, node);\n        return node;\n    }\n\n    protected computeSpecific(): { [id: string]: any } {\n        return {};\n    }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport Node from \"./node\";\nimport { PinLayout } from \"oura-node-editor\";\nimport { NodeName } from \"./consts\";\n\nexport default class TimerNode extends Node {\n    constructor() {\n        super(NodeName.Timer, 125, {x:0, y:0}, {\n            0: { name: \"count\", pinLayout: PinLayout.RIGHT_PIN, contentType: \"number\", data: { value: \"0\" } },\n            1: { name: \"is_running\", pinLayout: PinLayout.LEFT_PIN, contentType: \"check_box\", data: { value: false } }\n        });\n    }\n\n    static createFromJson(jsonObj: any) : TimerNode {\n        let node = new TimerNode();\n        Node.initFromJson(jsonObj, node);\n        return node;\n    }\n\n    protected computeSpecific(inputs: { [id: string]: any }): { [id: string]: any } {\n        return { \"0\": this.connectors[0].data.value };\n    }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport Node from \"./node\";\nimport { PinLayout } from \"oura-node-editor\";\nimport { NodeName } from \"./consts\";\n\nexport default class TranslateNode extends Node {\n    constructor() {\n        super(NodeName.Translate, 100, {x:0, y:0}, {\n            0: { name: \"draw\", pinLayout: PinLayout.BOTH_PINS, contentType: \"none\", data: {} },\n            1: {\n                name: \"x\",\n                pinLayout: PinLayout.LEFT_PIN,\n                contentType: \"number\",\n                data: { value: 0 }\n            },\n            2: {\n                name: \"y\",\n                pinLayout: PinLayout.LEFT_PIN,\n                contentType: \"number\",\n                data: { value: 0 }\n            }\n        });\n    }\n\n    static createFromJson(jsonObj: any) : TranslateNode {\n        let node = new TranslateNode();\n        Node.initFromJson(jsonObj, node);\n        return node;\n    }\n\n    protected computeSpecific(inputs: { [id: string]: any }): { [id: string]: any } {\n        let x = \"1\" in inputs ? inputs[1][0] : this.connectors[1].data.value;\n        let y = \"2\" in inputs ? inputs[2][0] : this.connectors[2].data.value;\n        const drawWithTranslate = (ctx: CanvasRenderingContext2D): void => {\n            ctx.translate(x, y);\n            if (inputs[0]) {\n                inputs[0].forEach((draw: (arg0: CanvasRenderingContext2D) => void) => {\n                    draw(ctx);\n                });\n            }\n            ctx.translate(-x, -y);\n        };\n        return { \"0\": drawWithTranslate };\n    }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport Node from \"./node\";\nimport { PinLayout } from \"oura-node-editor\";\nimport { NodeName } from \"./consts\";\n\nexport default class IfElseNode extends Node {\n    constructor() {\n        super(NodeName.IfElse, 100, {x:0, y:0}, {\n            0: {\n                name: \"out_value\",\n                pinLayout: PinLayout.RIGHT_PIN,\n                contentType: \"none\",\n                data: {}\n            },\n            1: {\n                name: \"test\",\n                pinLayout: PinLayout.LEFT_PIN,\n                contentType: \"check_box\",\n                data: { value: false }\n            },\n            2: {\n                name: \"if_value\",\n                pinLayout: PinLayout.LEFT_PIN,\n                contentType: \"none\",\n                data: {}\n            },\n            3: {\n                name: \"else_value\",\n                pinLayout: PinLayout.LEFT_PIN,\n                contentType: \"none\",\n                data: {}\n            }\n        });\n    }\n\n    static createFromJson(json: string) : IfElseNode {\n        let node = new IfElseNode();\n        Node.initFromJson(json, node);\n        return node;\n    }\n\n    protected computeSpecific(inputs: { [id: string]: any }): { [id: string]: any } {\n        const cond = \"1\" in inputs ? inputs[1][0] : this.connectors[1].data.value; \n        const if_value = \"2\" in inputs ? inputs[2][0] : null;\n        const else_value = \"3\" in inputs ? inputs[3][0] : null;\n\n        let ret = {};\n        if(cond && if_value) {\n            ret = { \"0\": if_value };\n        }\n        else if(!cond && if_value) {\n            ret = { \"0\": else_value };\n        }\n        return ret;\n    }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport Node from \"./node\";\nimport { PinLayout } from \"oura-node-editor\";\nimport { NodeName } from \"./consts\";\n\nexport default class StringNode extends Node {\n    constructor() {\n        super(NodeName.String, 100, {x:0, y:0}, {\n            0: {\n                name: \"string\",\n                pinLayout: PinLayout.RIGHT_PIN,\n                contentType: \"string\",\n                data: { value: \"\" }\n            }\n        });\n    }\n\n    static createFromJson(json: string) : StringNode {\n        let node = new StringNode();\n        Node.initFromJson(json, node);\n        return node;\n    }\n\n    protected computeSpecific(): { [id: string]: any } {\n        return { \"0\": this.connectors[0].data.value };\n    }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport Node from \"./node\";\nimport { PinLayout } from \"oura-node-editor\";\nimport { NodeName } from \"./consts\";\n\nexport default class SplitNode extends Node {\n    constructor() {\n        super(NodeName.Split, 100, {x:0, y:0}, {\n            0: {\n                name: \"out\",\n                pinLayout: PinLayout.RIGHT_PIN,\n                contentType: \"none\",\n                data: {}\n            },\n            1: {\n                name: \"input\",\n                pinLayout: PinLayout.LEFT_PIN,\n                contentType: \"string\",\n                data: { value: \"\" }\n            },\n            2: {\n                name: \"separator\",\n                pinLayout: PinLayout.LEFT_PIN,\n                contentType: \"string\",\n                data: { value: \"\", height: \"20px\" }\n            }\n        });\n    }\n\n    static createFromJson(json: string) : SplitNode {\n        let node = new SplitNode();\n        Node.initFromJson(json, node);\n        return node;\n    }\n\n    protected computeSpecific(inputs: { [id: string]: any }): { [id: string]: any } {\n        const str = \"1\" in inputs ? inputs[1][0] : this.connectors[1].data.value;\n        const split = \"2\" in inputs ? inputs[2][0] : this.connectors[2].data.value;\n        return {\"0\": split[0] ? str.split(split[0]) : str};\n    }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport Node from \"./node\";\nimport { PinLayout } from \"oura-node-editor\";\nimport { NodeName } from \"./consts\";\n\nexport default class OperationNode extends Node {\n    constructor() {\n        super(NodeName.Operation, 100, {x:0, y:0}, {\n            0: {\n                name: \"output\",\n                pinLayout: PinLayout.RIGHT_PIN,\n                contentType: \"none\",\n                data: { value: 0 }\n            },\n            1: {\n                name: \"type\",\n                pinLayout: PinLayout.NO_PINS,\n                contentType: \"select\",\n                data: { \n                    values: [\"add\", \"substract\", \"multiply\", \"divide\", \"modulo\"],\n                    selected_index: 0\n                }\n            },\n            2: {\n                name: \"x\",\n                pinLayout: PinLayout.LEFT_PIN,\n                contentType: \"number\",\n                data: { value: 0 }\n            },\n            3: {\n                name: \"y\",\n                pinLayout: PinLayout.LEFT_PIN,\n                contentType: \"number\",\n                data: { value: 0 }\n            }\n        });\n    }\n\n    static createFromJson(jsonObj: any) : OperationNode {\n        let node = new OperationNode();\n        Node.initFromJson(jsonObj, node);\n        return node;\n    }\n\n    protected computeSpecific(inputs: { [id: string]: any }): { [id: string]: any } {\n        const x = Number(\"2\" in inputs ? inputs[2][0] : this.connectors[2].data.value);\n        const y = Number(\"3\" in inputs ? inputs[3][0] : this.connectors[3].data.value);\n        let value = 0;\n        switch(this.connectors[1].data.selected_index) {\n            case 0:\n                value = x + y;\n                break;\n            case 1:\n                value = x - y;\n                break;\n            case 2:\n                value = x * y;\n                break;\n            case 3:\n                value = isNaN(x / y) ? 0 : x / y;\n                break;\n            case 4:\n                value = isNaN(x % y) ? 0 : x % y;\n                break;\n        }\n        return { \"0\": value };\n    }\n\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport Node from \"./node\";\nimport { NodeCollection, PinLayout } from \"oura-node-editor\";\nimport { NodeName } from \"./consts\";\nimport produce from \"immer\";\nimport _ from \"lodash\";\n\nexport default class LogNode extends Node {\n    public inputs: any;\n    \n    constructor() {\n        super(NodeName.Log, 100, {x:0, y:0}, {\n            0: {\n                name: \"log\",\n                pinLayout: PinLayout.LEFT_PIN,\n                contentType: \"none\",\n                data: {}\n            },\n            1: {\n                name: \"log\",\n                pinLayout: PinLayout.NO_PINS,\n                contentType: \"button\",\n                data: { \n                    label: \"log\"\n                }\n            },\n        });\n        this.inputs = [];\n        this.connectors[1].data.onClick = this.log\n    }\n\n    log(node: Node) {\n        (node as LogNode).inputs.forEach((element: any) => {\n            console.log(element);\n        });\n    }\n\n    static createFromJson(json: string) : LogNode {\n        let node = new LogNode();\n        Node.initFromJson(json, node);\n        node.connectors[1].data.onClick = node.log;\n        return node;\n    }\n\n    protected computeSpecific(inputs: { [id: string]: any }, nodeId: string, setNodes: React.Dispatch<React.SetStateAction<NodeCollection>>): { [id: string]: any } {\n        if(inputs[0] && !_.isEqual(inputs[0], this.inputs)) {\n            setNodes(\n                nodes => produce(nodes, (draft: NodeCollection) => {\n                    (draft[nodeId] as LogNode).inputs = inputs[0];\n                })\n            );\n        }\n        return {};\n    }\n}\n","import React, { useEffect, useRef } from \"react\";\nimport { ConnectorContentProps, ConnectorModel } from \"oura-node-editor\";\nimport produce from \"immer\";\n\nconst Canvas = (props : ConnectorContentProps): JSX.Element => {\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n\n    useEffect(() => {\n        const { nodeId, cId, connector, onConnectorUpdate } = props;\n        if(canvasRef.current) {\n            const ctx = canvasRef.current.getContext(\"2d\");\n            if(ctx && (!(\"canvas_ctx\" in connector.data) || ctx !== connector.data.canvas_ctx)) {\n                const newConnector = produce(connector, (draft: ConnectorModel) => {\n                    draft.data.canvas_ctx = ctx;\n                });\n                onConnectorUpdate(nodeId, cId, newConnector);\n            }\n        }\n    }, [canvasRef, props]);\n\n    return (\n        <canvas style={{border: \"1px solid black\"}} width={props.connector.data.canvas_width} height={props.connector.data.canvas_height} ref={canvasRef}/>\n    );\n};\n\nexport default Canvas;\n","import React, { Component } from \"react\";\nimport produce from \"immer\";\nimport { ConnectorContentProps, ConnectorModel, ErrorConnectorComponent } from \"oura-node-editor\";\nimport { ChromePicker, ColorResult } from 'react-color';\n\nclass ColorPicker extends Component<ConnectorContentProps> {\n\n    constructor(props: ConnectorContentProps) {\n        super(props);\n        \n        this.onColorChange = this.onColorChange.bind(this);\n    }\n\n    onColorChange(color: ColorResult) {\n        const { nodeId, cId, connector, onConnectorUpdate } = this.props;\n        const newConnector = produce(connector, (draft: ConnectorModel) => {\n            draft.data.color = `rgba(${color.rgb.r}, ${color.rgb.g}, ${color.rgb.b}, ${color.rgb.a})`;\n        });\n        onConnectorUpdate(nodeId, cId, newConnector);\n    }\n\n    render(): JSX.Element {\n        const { connector } = this.props;\n        if (!(\"color\" in connector.data)) {\n            const message = \"'color' connector types must provide a string field named 'color'\";\n            return <ErrorConnectorComponent message={message} />;\n        }\n        return (\n            <ChromePicker color={connector.data.color} onChange={ this.onColorChange } />\n        );\n    }\n}\n\nexport default ColorPicker;\n","import React, { Component } from \"react\";\nimport { ConnectorContentProps } from \"oura-node-editor\";\nimport Slider from 'rc-slider';\nimport 'rc-slider/assets/index.css';\n\nclass MySlider extends Component<ConnectorContentProps> {\n    render(): JSX.Element {\n        return (\n            <>\n                ICI\n                <Slider onChange={value => {console.log(value)}} />\n            </>\n        );\n    }\n}\n\nexport default MySlider;\n","import { ConnectorContentProps } from \"oura-node-editor\";\nimport Canvas from \"./canvas\";\nimport ColorPicker from \"./color_picker\";\nimport MySlider from \"./slider\";\n\nexport function createCustomConnectorsContents(props: ConnectorContentProps): JSX.Element | null {\n    const { connector } = props;\n    if (connector.contentType === \"color\") {\n        return <ColorPicker {...props} />\n    }\n    if (connector.contentType === \"slider\") {\n        return <MySlider {...props} />\n    }\n    if (connector.contentType === \"canvas\") {\n        return <Canvas {...props} />\n    }\n    return null;\n}\n","import React from \"react\";\nimport { produce } from \"immer\";\nimport _ from \"lodash\";\n\nimport {\n    NodeEditor,\n    LinkModel,\n    PanZoomModel,\n    generateUuid,\n    ConnectorModel,\n    NodeCollection,\n    LinkCollection,\n    NodeModel,\n    XYPosition,\n    SelectionItem,\n    AddNodeContextualMenu,\n    SelectionManagementContextualMenu\n} from \"oura-node-editor\";\nimport { createNodeFromJson, createNodeSchema, Node } from \"./nodes\";\nimport CanvasNode from \"./nodes/canvas\";\nimport { createCustomConnectorsContents } from \"./connector_content\";\nimport LogNode from \"./nodes/log\";\n// import { dumbLinkCreator, dumbNodeCreator } from \"./debug\";\n\nconst OuraCanvasApp = (): JSX.Element => {\n    const [nodePickerPos, setNodePickerPos] = React.useState<XYPosition | null>(null);\n    const [nodePickerOnMouseHover, setNodePickerOnMouseHover] = React.useState<boolean>(false);\n    const [panZoomInfo, setPanZoomInfo] = React.useState<PanZoomModel>({\n        zoom: 1,\n        topLeftCorner: { x: 0, y: 0 }\n    });\n    const [selectedItems, setSelectedItems] = React.useState<SelectionItem[]>([]);\n    const locallyStoredNodes = localStorage.getItem(\"nodes\");\n    const locallyStoredLinks = localStorage.getItem(\"links\");\n    const initNodes: NodeCollection = locallyStoredNodes ? JSON.parse(locallyStoredNodes) : {};\n    const initLinks: LinkCollection = locallyStoredLinks ? JSON.parse(locallyStoredLinks) : {};\n    if(locallyStoredNodes) {\n        Object.keys(initNodes).forEach((key) => {\n            initNodes[key] = createNodeFromJson(initNodes[key]);\n        });\n    }\n    const [nodes, setNodes] = React.useState<NodeCollection>(initNodes);\n    const [links, setLinks] = React.useState<LinkCollection>(initLinks);\n    localStorage.setItem(\"nodes\", JSON.stringify(nodes));\n    localStorage.setItem(\"links\", JSON.stringify(links));\n\n    const nodesSchemas: { [nId: string]: NodeModel } = createNodeSchema();\n\n    // Redraw canvas effect\n    React.useEffect(() => {\n        Object.keys(nodes).forEach((key) => {\n            const node = nodes[key];\n            if (node instanceof CanvasNode || node instanceof LogNode) {\n                try {\n                    (node as Node).compute(nodes, links, setNodes);\n                } catch(e: any) {\n                    console.error(e);\n                }\n            }\n        });\n    }, [nodes, links]);\n\n    React.useEffect(() => {\n        const interval = setInterval(() => {\n            let updated = false;\n            const newNodes = produce(nodes, (draft: NodeCollection) => {\n                for (let key of Object.keys(nodes)) {\n                    if(draft[key].name === \"timer\" && draft[key].connectors[1].data.value) {\n                        draft[key].connectors[0].data.value = (Number(draft[key].connectors[0].data.value) + 1).toString();\n                        updated = true;\n                    }\n                }\n            });\n            if(updated) {\n                setNodes(newNodes);\n            }\n        }, 1000 / 60);\n        return () => clearInterval(interval);\n      }, [nodes, links]);\n\n    const onNodeMove = React.useCallback(\n        (id: string, newX: number, newY: number, newWidth: number) => { \n            setNodes(\n                nodes => produce(nodes, (draft: NodeCollection) => {\n                    draft[id].position = { x: newX, y: newY };\n                    draft[id].width = newWidth;\n                })\n            );\n        }, []\n    );\n\n    const onCreateLink = React.useCallback(\n        (link: LinkModel) => {\n            setLinks(\n                links => produce(links, (draft) => {\n                    draft[generateUuid()] = link;\n                })\n            );\n        }, []\n    );\n\n    const onDeleteSelection = React.useCallback(\n        () => {\n            const deleteNodeIds = selectedItems.filter((value: SelectionItem) => value.type === \"node\").map((value) => value.id);\n            const deletedLinksIds = selectedItems.filter((value: SelectionItem) => value.type === \"link\").map((value) => value.id);\n            setNodes(\n                nodes => produce(nodes, (draft: NodeCollection) => {\n                    deleteNodeIds.forEach((id) => {\n                        delete draft[id];\n                    });\n                })\n            );\n            setLinks(\n                links => produce(links, (draft: LinkCollection) => {\n                    Object.keys(links).forEach(linkKey => {\n                        const link = links[linkKey];\n                        if (deleteNodeIds.includes(link.inputNodeId) || deleteNodeIds.includes(link.outputNodeId)) {\n                            delete draft[linkKey];\n                        }\n                    });\n                    deletedLinksIds.forEach((id) => {\n                        delete draft[id];\n                    });\n                })\n            );\n        },\n        [selectedItems]\n    );\n\n    const onNodeSelection = React.useCallback(\n        (id: string) => {\n            if (nodePickerPos) {\n                setNodes(\n                    nodes => produce(nodes, (draft) => {\n                        const newNode = _.clone(nodesSchemas[id]);\n                        const newX =\n                            -panZoomInfo.topLeftCorner.x / panZoomInfo.zoom +\n                            nodePickerPos.x / panZoomInfo.zoom;\n                        const newY =\n                            -panZoomInfo.topLeftCorner.y / panZoomInfo.zoom +\n                            nodePickerPos.y / panZoomInfo.zoom;\n                        newNode.position = { x: newX, y: newY };\n                        draft[generateUuid()] = newNode;\n                    })\n                );\n                setNodePickerOnMouseHover(false);\n                setNodePickerPos(null);\n            }\n        },\n        [panZoomInfo, nodePickerPos, nodesSchemas]\n    );\n\n    const onConnectorUpdate = React.useCallback(\n        (nodeId: string, cId: string, connector: ConnectorModel) => {\n            setNodes(\n                nodes => produce(nodes, (draft) => {\n                    draft[nodeId].connectors[cId] = connector;\n                })\n            );\n        }, []\n    );\n\n    const onContextMenu = React.useCallback(\n        (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n            event.preventDefault();\n            if (!nodePickerPos) {\n                setNodePickerPos({ x: event.pageX, y: event.pageY });\n            } else {\n                setNodePickerOnMouseHover(false);\n                setNodePickerPos(null);\n            }\n        },\n        [nodePickerPos]\n    );\n\n    const onMouseDown = React.useCallback(\n        () => {\n            if(nodePickerPos && !nodePickerOnMouseHover) {\n                setNodePickerOnMouseHover(false);\n                setNodePickerPos(null);\n            }\n        },\n        [nodePickerOnMouseHover, nodePickerPos, setNodePickerPos]\n    );\n\n    let nodePicker = null;\n    if(nodePickerPos && selectedItems.length === 0) {\n        nodePicker = <div\n                style={{\n                    width: 640,\n                    height: 500,\n                    position: \"absolute\",\n                    top: nodePickerPos.y,\n                    left: nodePickerPos.x,\n                    backgroundColor: \"white\"\n                }}>\n                <AddNodeContextualMenu \n                    nodesSchema={nodesSchemas}\n                    onNodeSelection={onNodeSelection}\n                    onMouseHover={setNodePickerOnMouseHover}\n                    createCustomConnectorComponent={createCustomConnectorsContents}\n                />\n            </div>;\n    }\n    else if(nodePickerPos) {\n        nodePicker = <div\n            style={{\n                width: 640,\n                height: 480,\n                position: \"absolute\",\n                top: nodePickerPos.y,\n                left: nodePickerPos.x,\n                backgroundColor: \"white\"\n            }}>\n                <SelectionManagementContextualMenu\n                    onMouseHover={setNodePickerOnMouseHover}\n                    onDeleteSelection={onDeleteSelection}\n                />\n            </div>\n    }\n\n    return (\n        <>\n            <div\n                style={{ width: \"100%\", height: \"100%\" }}\n                onContextMenu={onContextMenu}\n                onMouseDown={onMouseDown}\n                tabIndex={0}>\n                <NodeEditor\n                    panZoomInfo={panZoomInfo}\n                    nodes={nodes}\n                    links={links}\n                    selectedItems={selectedItems}\n                    onPanZoomInfo={setPanZoomInfo}\n                    onSelectedItems={setSelectedItems}\n                    onNodeMove={onNodeMove}\n                    onCreateLink={onCreateLink}\n                    onConnectorUpdate={onConnectorUpdate}\n                    createCustomConnectorComponent={createCustomConnectorsContents}\n                />\n                {nodePicker}\n            </div>\n        </>\n    );\n};\n\nexport default OuraCanvasApp;\n","import { NodeModel } from \"oura-node-editor\";\n\nimport Node from \"./node\";\nimport CanvasNode from \"./canvas\";\nimport RectangleNode from \"./rectangle\";\nimport RotateNode from \"./rotate\";\nimport NumberNode from \"./number\";\nimport ColorNode from \"./color\";\nimport TimerNode from \"./timer\";\nimport { NodeName } from \"./consts\";\nimport TranslateNode from \"./translate\";\nimport IfElseNode from \"./if_else\";\nimport StringNode from \"./string\";\nimport SplitNode from \"./split\";\nimport OperationNode from \"./operation\";\nimport LogNode from \"./log\";\n\nfunction createNodeSchema(): { [nId: string]: NodeModel } {\n    return {\n        0: new CanvasNode(),\n        1: new RectangleNode(),\n        2: new RotateNode(),\n        3: new NumberNode(),\n        4: new TimerNode(),\n        5: new ColorNode(),\n        6: new TranslateNode(),\n        7: new IfElseNode(),\n        8: new StringNode(),\n        9: new SplitNode(),\n        10: new OperationNode(),\n        11: new LogNode()\n    };\n}\n\nfunction createNodeFromJson(jsonObj: any) : Node {\n    let node: Node | undefined = undefined;\n    switch(jsonObj.name) {\n        case NodeName.Canvas:\n            node = CanvasNode.createFromJson(jsonObj);\n            break;\n        case NodeName.Color:\n            node = ColorNode.createFromJson(jsonObj);\n            break;\n        case NodeName.Number:\n            node = NumberNode.createFromJson(jsonObj);\n            break;\n        case NodeName.Rectangle:\n            node = RectangleNode.createFromJson(jsonObj);\n            break;\n        case NodeName.Rotate:\n            node = RotateNode.createFromJson(jsonObj);\n            break;\n        case NodeName.Timer:\n            node = TimerNode.createFromJson(jsonObj);\n            break;\n        case NodeName.Translate:\n            node = TranslateNode.createFromJson(jsonObj);\n            break;\n        case NodeName.IfElse:\n            node = IfElseNode.createFromJson(jsonObj);\n            break;\n        case NodeName.String:\n            node = StringNode.createFromJson(jsonObj);\n            break;\n        case NodeName.Split:\n            node = SplitNode.createFromJson(jsonObj);\n            break;\n        case NodeName.Operation:\n            node = OperationNode.createFromJson(jsonObj);\n            break;\n        case NodeName.Log:\n            node = LogNode.createFromJson(jsonObj);\n            break;\n    }\n    if(!node) {\n        throw new Error(\"Error while reading node from json\"); \n    }\n    return node;\n}\n\nexport { Node, CanvasNode, createNodeSchema, createNodeFromJson };\n","import React from \"react\";\n\nimport OuraCanvasApp from \"./oura_canvas\";\n\nconst App = (): JSX.Element => (\n    <div style={{ width: \"100%\", height: \"100vh\" }} className=\"App\">\n        <OuraCanvasApp />\n    </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}